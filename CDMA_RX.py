#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Nov 24, 2018 02:15:05 PM +0200  platform: Windows NT


import sys
import tkinter as tk
import serial
from scipy import ndimage
import numpy as np
import matplotlib.pyplot as plt
import math
import time
import tkinter.ttk as ttk
from PIL import Image, ImageTk
from tkinter import filedialog
from itertools import product


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import CDMA_RX_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    CDMA_RX_support.set_Tk_var()
    top = Toplevel1 (root)
    CDMA_RX_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    CDMA_RX_support.set_Tk_var()
    top = Toplevel1 (w)
    CDMA_RX_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None
###################for CDMA##############

def decode_data(encoded,w):
    encoded=np.reshape(encoded,((int)(len(encoded)/len(w)), len(w)))
    decoded=[]
    for i in range(0,len(w)):
        decoded=np.concatenate((decoded,np.dot(encoded,w[i]))).astype(int)
   # decoded=(int)(decoded/len(w))
    for i in range(0,len(decoded)):
        if(decoded[i]>0):
            decoded[i]=1
        else:
            decoded[i]=-1
    decoded=np.reshape(decoded,(len(w),(int)(len(decoded)/len(w))))
    return decoded

def bin2num(bitlist):
    out = 0
    for bit in bitlist:
        out = (out << 1) | bit
    return out

def convert_vector2img(vec):
    temp = []
    for i in range(0, len(vec), 8):
        temp = np.append(temp, bin2num(vec[i:i+8])).astype(int)
    # convert 1d array to 2d matrix
    img = np.reshape(temp, ((int)(math.sqrt(len(temp))),(int)(math.sqrt(len(temp)))))
    return img

def bipolar2bin(vec):
    temp=np.copy(vec)
    for i in range(len(vec)):
        if temp[i]==-1:
            temp[i]=0
    return temp

def binary_counting_matrix(n):
    #creation of binary table
    B = [i for i in product(range(2), repeat=n)]

    #transpose of the matrix B
    Bt=np.transpose(B)

    #dot product of the matrix B and her traspose
    Hn=B@Bt

    #module 2 on the matrix Hn
    for i in range (len(Hn)):
        for j in range (len(Hn)):
            Hn[i][j]=Hn[i][j]%2

    #switching every 0 -> 1 and 1 -> -1
    for i in range (len(Hn)):
        for j in range (len(Hn)):
            if(Hn[i][j]==0):
                Hn[i][j]=1
            elif(Hn[i][j]==1):
                Hn[i][j]=-1
            else:
                print("error")
    return Hn


######################class###################
class Toplevel1:
    global ser,recData,w,decoded0,decoded1
    ser=0

    def init_serial(self):
        try:

            COMNUM = self.ports.get()  # Enter Your COM Port Number Here.

            # global ser  # Must be declared in Each Function
            self.ser = serial.Serial()
            self.ser.baudrate = 115200
            self.ser.port = 'COM%s' % COMNUM  # COM Port Name

            # ser.port = '/dev/ttyUSB0' #If Using Linux

            # Specify the TimeOut in seconds, so that SerialPort
            # Doesn't hangs
            self.ser.timeout = 10
            self.ser.open()  # Opens SerialPort

            # print port open or closed
            if self.ser.isOpen():
                print('Port: ', self.ser.portstr, "opened successfully")
                # tk.Label(master, text=ser.portstr + " opened successfully").grid(row=0, column=4)
        except EnvironmentError:
            print("wrong port")

    def recieved_data(self):
        bytesToRead = self.ser.inWaiting()
        print(bytesToRead)
        if (int(bytesToRead) == 0):
            #tk.Label(master, text="no data incoming").grid(row=6, column=1)
            print("no data incoming")

        else:
            # bytesToRead = int.from_bytes(self.ser.read(4), sys.byteorder)
            #rx 3 com
            bytesToRead = int.from_bytes(self.ser.read(4), byteorder=sys.byteorder)
            chuck_size = 4096
            while bytesToRead > 0:
                read = self.ser.read(chuck_size)
                self.recData.extend(read)
                bytesToRead -= len(read)
                self.ser.write('1'.encode('ascii'))
            # self.recData.extend(curr_read)
            # read += len(curr_read)
                # # vect=list(data)
            #self.recData = np.fromstring(read)
            if bytesToRead < 0:
                self.recData = self.recData[-1 * bytesToRead:]
            print(len(self.recData))
                # print(self.recData.decode('ascii'))
                #Label(master, text=data).grid(row=6, column=1)
            # print("read " + read)
            print(self.recData)
            print("done")
            self.recData = np.frombuffer(self.recData)

    def decode_b(self):
        self.w = binary_counting_matrix(1)
        print(self.w)
        print(self.w.shape)
        decoded = decode_data(np.array(self.recData), self.w)
        self.decoded0 = bipolar2bin(decoded[0])
        self.decoded1 = bipolar2bin(decoded[1])



    def show_img(self):
        self.decoded0 = convert_vector2img(self.decoded0)
        self.decoded1 = convert_vector2img(self.decoded1)
        plt.figure(1, figsize=(10, 10))
        plt.subplot(1, 2, 1)
        plt.title('decoded data 0')
        plt.imshow(self.decoded0, cmap='gray')
        plt.subplot(1, 2, 2)
        plt.title('decoded data 1')
        plt.imshow(self.decoded1, cmap='gray')
        plt.show()

    def __init__(self, top=None):
        self.recData = bytearray()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("375x255+786+353")
        top.title("CDMA Receiver")
        top.configure(background="#d9d9d9")

        self.ports = tk.StringVar()
        self.portOpt = ttk.Combobox(top, textvariable=self.ports)
        self.portOpt['values'] = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
        self.portOpt.place(relx=0.067, rely=0.078, relheight=0.094
                , relwidth=0.216)
        self.portOpt.configure(takefocus="")
        self.portOpt.current(5)  ##change it later to 0

        self.openB = tk.Button(top)
        self.openB.place(relx=0.387, rely=0.059, height=24, width=81)
        self.openB.configure(activebackground="#d9d9d9")
        self.openB.configure(activeforeground="#000000")
        self.openB.configure(background="#d9d9d9")
        self.openB.configure(disabledforeground="#a3a3a3")
        self.openB.configure(foreground="#000000")
        self.openB.configure(highlightbackground="#d9d9d9")
        self.openB.configure(highlightcolor="black")
        self.openB.configure(pady="0")
        self.openB.configure(text='''Open port''')
        self.openB.configure(width=81)
        self.openB.configure(command=self.init_serial)



        self.receiveB = tk.Button(top)
        self.receiveB.place(relx=0.053, rely=0.216, height=24, width=81)
        self.receiveB.configure(activebackground="#d9d9d9")
        self.receiveB.configure(activeforeground="#000000")
        self.receiveB.configure(background="#d9d9d9")
        self.receiveB.configure(disabledforeground="#a3a3a3")
        self.receiveB.configure(foreground="#000000")
        self.receiveB.configure(highlightbackground="#d9d9d9")
        self.receiveB.configure(highlightcolor="black")
        self.receiveB.configure(pady="0")
        self.receiveB.configure(text='''Receive data''')
        self.receiveB.configure(command=self.recieved_data)

        self.decodeB = tk.Button(top)
        self.decodeB.place(relx=0.053, rely=0.373, height=24, width=81)
        self.decodeB.configure(activebackground="#d9d9d9")
        self.decodeB.configure(activeforeground="#000000")
        self.decodeB.configure(background="#d9d9d9")
        self.decodeB.configure(disabledforeground="#a3a3a3")
        self.decodeB.configure(foreground="#000000")
        self.decodeB.configure(highlightbackground="#d9d9d9")
        self.decodeB.configure(highlightcolor="black")
        self.decodeB.configure(pady="0")
        self.decodeB.configure(text='''Decode''')
        self.decodeB.configure(command=self.decode_b)

        self.showB = tk.Button(top)
        self.showB.place(relx=0.053, rely=0.529, height=24, width=81)
        self.showB.configure(activebackground="#d9d9d9")
        self.showB.configure(activeforeground="#000000")
        self.showB.configure(background="#d9d9d9")
        self.showB.configure(disabledforeground="#a3a3a3")
        self.showB.configure(foreground="#000000")
        self.showB.configure(highlightbackground="#d9d9d9")
        self.showB.configure(highlightcolor="black")
        self.showB.configure(pady="0")
        self.showB.configure(text='''show''')
        self.showB.configure(command=self.show_img)

        self.imgC = tk.Canvas(top)
        self.imgC.place(relx=0.507, rely=0.275, relheight=0.196, relwidth=0.4)
        self.imgC.configure(background="#d9d9d9")
        self.imgC.configure(borderwidth="2")
        self.imgC.configure(insertbackground="black")
        self.imgC.configure(relief='ridge')
        self.imgC.configure(selectbackground="#c4c4c4")
        self.imgC.configure(selectforeground="black")
        self.imgC.configure(width=160)

if __name__ == '__main__':
    vp_start_gui()





